configfile: "./config.yaml"
SAMPLES = list(config["sample"].keys())
total_threads = config["resources"]["threads"]
hisat2_threads = int(total_threads/2 - 1) if len(SAMPLES) != 1 and total_threads > 8 else total_threads-2
fastq_dump_threads = 8 if total_threads > 8 else total_threads
fastp_threads = 8 if total_threads > 8 else total_threads
featureCounts_threads = 8 if total_threads > 8 else total_threads
fastqc_threads = 2 if total_threads > 3 else total_threads
sambamba_threads = 4 if total_threads > 4 else total_threads
samtools_threads = 4 if total_threads > 4 else total_threads
MarkDuplicates_threads = 9 if total_threads > 5 else total_threads
splitNCigarReads_threads = 11 if total_threads > 10 else total_threads

rule all:
    input:
        ancient(expand("{sample}/{sample}_counts.txt", sample=SAMPLES)),
        ancient(expand("{sample}/{sample}_1_fastqc.zip", sample=SAMPLES)),
        expand("{sample}/{sample}_fil_indel.vcf", sample=SAMPLES)
    shell:
        """
        multiqc {config[output_directory]} -o {config[output_directory]} --force && rm -rf {config[output_directory]}/tmp_read_resource_* {config[output_directory]}/{config[user]} && find {config[output_directory]} -type l  -name "*fastq.gz" | xargs rm -f
        """

rule fastq_dump:
    input:
        ancient(lambda wildcards: config["sample"][wildcards.sample])
    output:
        "{sample}/{sample}_1.fastq.gz",
        "{sample}/{sample}_2.fastq.gz"
    log:
        "log/{sample}_fastq_dump.log"
    threads: fastq_dump_threads
    params:
        config["output_directory"]+"/{sample}",
    resources:
        tmpdir=config["output_directory"]
    shell:
        """
        parallel-fastq-dump --split-files --gzip --outdir {params[0]} --threads {threads} --sra-id {input} 2> {log}
        """

rule fastp:
    input:
        ancient("{sample}/{sample}_1.fastq.gz"),
        ancient("{sample}/{sample}_2.fastq.gz")
    output:
        temp("{sample}/{sample}_1_good.fq.gz"),
        temp("{sample}/{sample}_2_good.fq.gz"),
        html="{sample}/{sample}.html",
        json="{sample}/{sample}.json"
    log:
        "log/{sample}_fastp.log"
    threads: fastp_threads
    params:
        lambda wildcards: config["fastp_para"][wildcards.sample]
    resources:
        tmpdir=config["output_directory"]
    shell:
        """
        fastp -w {threads} -h {output[html]} -j {output[json]} -i {input[0]} -I {input[1]} -o {output[0]} -O {output[1]} {params[0]} 2> {log}
        """

rule HISAT2:
    input:
        "{sample}/{sample}_1_good.fq.gz",
        "{sample}/{sample}_2_good.fq.gz"
    output:
        "{sample}/{sample}.bam",
        "{sample}/{sample}.bam.bai"
    params:
        "{sample}/{sample}.bam",
        "{sample}",
        "{sample}/{sample}-splicesites.tab",
        "{sample}/{sample}-splicesites.bed",
    log:
        "log/{sample}_HISAT2.log"
    threads: hisat2_threads
    resources:
        tmpdir=config["output_directory"]
    shell:
        """
        hisat2 --rg-id hisat2 -p {threads} --rg SM:{params[1]} --rg PL:illumina --rg LB:library  --rg GPU:unit1 --rg GSM:{params[1]} -x {config[resources][hisat2_index]} --known-splicesite-infile {config[resources][known_splicesite]} --novel-splicesite-outfile {params[2]} -1 {input[0]} -2 {input[1]} --no-mixed --no-discordant | sambamba view -t {sambamba_threads} --sam-input --format=bam /dev/stdin | samtools sort -@ {samtools_threads} > {params[0]} && samtools index -@ {samtools_threads} {params[0]} && python hisat2_jun2bed.py {params[2]} {params[3]} 2> {log}
        """
rule featureCounts:
    input:
        ancient("{sample}/{sample}.bam")
    output:
        "{sample}/{sample}_counts.txt"
    log:
        "log/{sample}_featurecounts.log"
    threads: featureCounts_threads
    resources:
        tmpdir=config["output_directory"]
    shell:
        """
        featureCounts  -a {config[resources][gtf]} -o {output[0]} -T {threads} -p --countReadPairs -t exon -g gene_id {input[0]} && python ./count_to_tpm.py -f {output[0]} 2> {log}
        """

rule fastqc:
    input:
        ancient("{sample}/{sample}_1.fastq.gz"),
        ancient("{sample}/{sample}_2.fastq.gz")
    output:
        "{sample}/{sample}_1_fastqc.zip",
        "{sample}/{sample}_2_fastqc.zip",
        "{sample}/{sample}_1_fastqc.html",
        "{sample}/{sample}_2_fastqc.html",
        "log/{sample}_fastqc.log"
    log:
        "log/{sample}_fastqc.log"
    threads: fastqc_threads
    resources:
        tmpdir=config["output_directory"]
    priority: 1
    shell:
        """
        fastqc -o {wildcards.sample} -t {threads} {input[0]} {input[1]} 2> {log}
        """

rule MarkDuplicates:
    input:
        rules.HISAT2.output[0]
    output:
        temp("{sample}/{sample}.mdup.bam"),
        temp("{sample}/{sample}.duplicate.metrics")
    threads: MarkDuplicates_threads
    resources:
        tmpdir=config["output_directory"],
        disk_mb=1048576,
        mem_mb=102400
    log: "log/{sample}_MarkDuplicates.log"
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -cp {config[software][picard]} picard.cmdline.PicardCommandLine MarkDuplicates I={input} O={output[0]} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT M={output[1]} 2> {log}
        """

rule splitNCigarReads:
    input:
        rules.MarkDuplicates.output[0]
    output:
        temp("{sample}/{sample}.Aligned.split.bam"),
        temp("{sample}/{sample}.Aligned.split.bai")
    log: "log/{sample}_splitNCigarReads.log"
    threads: splitNCigarReads_threads
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} SplitNCigarReads -R {config[resources][fasta]} -I {input} -O {output[0]} 2> {log}
        """

rule baseRecalibrator:
    input:
        rules.splitNCigarReads.output[0],
        rules.splitNCigarReads.output[1]
    output:
        temp("{sample}/{sample}.Aligned.recali.table")
    log: "log/{sample}_baseRecalibrator.log"
    threads: 1
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} BaseRecalibrator -R {config[resources][fasta]} -I {input[0]} -O {output[0]} --known-sites {config[resources][vcf]} 2> {log}
        """

rule ApplyBQSR:
    input:
        rules.splitNCigarReads.output[0],
        rules.baseRecalibrator.output[0]
    output:
        temp("{sample}/{sample}_recal.bam")
    log: "log/{sample}_ApplyBQSR.log"
    threads: 2
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} ApplyBQSR -R {config[resources][fasta]} -I {input[0]} -bqsr {input[1]} -O {output} 2> {log}
        """

rule HaplotypeCaller:
    input:
        rules.ApplyBQSR.output[0]
    output:
        "{sample}/{sample}_raw_vcf"
    threads: 4
    log: "log/{sample}_HaplotypeCaller.log"
    threads: total_threads
    priority: 10
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} HaplotypeCaller --native-pair-hmm-threads {threads} -R {config[resources][fasta]} -I {input[0]}  -O {output} --dbsnp {config[resources][vcf]} -stand-call-conf 20.000000 --dont-use-soft-clipped-bases --create-output-variant-index false 2> {log}
        """

rule IndexFeatureFile:
    input:
        rules.HaplotypeCaller.output[0]
    output:
        "{sample}/{sample}_raw_vcf.idx"
    log: "log/{sample}_IndexFeatureFile.log"
    threads: 1
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} IndexFeatureFile  -I {input[0]} 2> {log}
        """

rule VariantFiltration:
    input:
        rules.HaplotypeCaller.output[0],
        rules.IndexFeatureFile.output[0]
    output:
        "{sample}/{sample}_fil_vcf"
    log: "log/{sample}_VariantFiltration.log"
    threads: 1
    resources:
        disk_mb=1048576,
        mem_mb=102400
    shell:
        """
        java -Xms1g -Xmx25g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} VariantFiltration -R {config[resources][fasta]} -V {input[0]} -O {output} -window 35 -cluster 3 --filter-name FS -filter 'FS > 30.000000' --filter-name QD -filter 'QD < 2.000000' 2> {log}
        """

rule SelectVariants:
    input:
        rules.VariantFiltration.output[0]
    output:
        "{sample}/{sample}_fil_indel.vcf",
        "{sample}/{sample}_fil_snp.vcf"
    threads: 1
    resources:
        disk_mb=1048576,
        mem_mb=102400
    log: "log/{sample}_SelectVariants.log"
    shell:
        """
        java -Xms5g -Xmx10g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} SelectVariants --select-type-to-include INDEL -R {config[resources][fasta]} -V {input} -O {output[0]} &&
        java -Xms5g -Xmx10g -Djava.io.tmpdir={config[output_directory]} -jar {config[software][gatk]} SelectVariants --select-type-to-include SNP -R {config[resources][fasta]} -V {input} -O {output[1]} 2> {log}
        """